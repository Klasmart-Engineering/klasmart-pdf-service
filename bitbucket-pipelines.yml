options:
  docker: true
  size: 2x
pipelines:
  pull-requests:
    'master':
      - step:
          name: Atlassian Security Secrets Scan
          script:
            - pipe: atlassian/git-secrets-scan:0.5.1
      - step:
          image: 'node:16.6'
          name: 'Linter'
          script: 
            - npm config set dev true 
            - npm config set npat true
            - npm set //npm.pkg.github.com/:_authToken $GH_PACKAGES_PAT
            - npm i --no-progress
            - npx eslint . --ext .js,.jsx,.ts,.tsx
      - step:
          name: 'Test'
          image: 'node:16.6'
          script:
            - npm i --no-progress
            - npm run test:unit
  branches:
    alpha:
    - step: 
        name: 'Fetch NPM dependencies'
        image: node:16.6
        script:
          - npm set //npm.pkg.github.com/:_authToken $GH_PACKAGES_PAT
          - npm ci
          - npm run build
          - npm prune --production
          - npm audit fix --production
          - export SEMVAR=$(git tag -l --contains HEAD)
          - echo $SEMVAR > semvar.txt
        caches:
          - nodemodules
        artifacts:
          - node_modules/**
          - semvar.txt
          - dist/**
    - step:
        name: "Build & Push Docker image"
        image: python:3.9-alpine
        script:
          - pip3 install -U awscli
          - export REPO=$DOCKER_REPO_URL/kidsloop-pdf-service
          - export SEMVAR=$(cat semvar.txt)
          - aws ecr get-login-password --region eu-west-2 | docker login --username AWS --password-stdin $DOCKER_REPO_URL
          - docker build -f Dockerfile -t pdf-service --target build .
          - docker tag pdf-service:latest $REPO:alpha
          - docker push $REPO:alpha
          - |
            if [ "${#SEMVAR}" -ge 2 ]; then
              docker tag pdf-service:latest $REPO:$SEMVAR
              docker push $REPO:$SEMVAR 
            fi
        services:
          - docker
        caches:
          - docker
        size: 2x

    # This step will deploy an image to the new "landing zone" environment via ArgoCD.
    # See here for the equivalent Github Actions pipeline: https://github.com/KL-Engineering/user-service/pull/27
    - step: &step-deploy-landing-zone
        name: "Deploy built image to the Kidsloop landing zone"
        image: argoproj/argocd:v2.3.1
        script:
          # What are we deploying?
          - export BRANCH_TAG=$([[ ! -z "$BITBUCKET_BRANCH" ]] && echo "$BITBUCKET_BRANCH" | sed -E 's/([^0-9a-zA-Z]+)/-/g' | awk '{print tolower($0)}' || echo "master")
          - export COMMIT_TAG=$(echo $BITBUCKET_COMMIT | cut -c1-7)
          - export SEMVAR=$(cat semvar.txt)
          - export DEPLOY_TAG=$(if [[ ! -z "$SEMVAR" ]]; then echo $SEMVAR; else echo "$BRANCH_TAG-$COMMIT_TAG"; fi)
          - echo "Tag to deploy - $DEPLOY_TAG"

          # Set up port forwarding
          - echo $TOOLS_KUBECONFIG_CONTENT_B64 | base64 -d > $BITBUCKET_CLONE_DIR/kubeconfig.yml
          - >
            PORTFORWARD_CONTAINER=$(
            docker run
            --volume $BITBUCKET_CLONE_DIR/kubeconfig.yml:/mnt/kubeconfig.yml
            --env KUBECONFIG=/mnt/kubeconfig.yml
            --publish 8080:8080
            --hostname kubeproxy
            --detach bitnami/kubectl:1.21
            port-forward -n argocd svc/argocd-server
            --address 0.0.0.0 8080:80
            )
          - sleep 5

          # Deploy tag to environment with ArgoCD
          - >
            export
            ARGOCD_SERVER=localhost:8080
            ARGOCD_APP=uk-landingzone-pdf-service
            ARGOCD_APP_CHART_TAG_PATH=pdfService.tag
            ARGOCD_OPTS='--grpc-web --insecure --plaintext'
          - >
            argocd login $ARGOCD_SERVER
            --username $ARGOCD_AUTH_USERNAME
            --password $ARGOCD_AUTH_PASSWORD
            $ARGOCD_OPTS
          - argocd app get $ARGOCD_APP
          - argocd app set $ARGOCD_APP -p $ARGOCD_APP_CHART_TAG_PATH=$DEPLOY_TAG
          - argocd app sync $ARGOCD_APP --timeout 300

          # Clean up tasks
          - docker logs $PORTFORWARD_CONTAINER
          - docker kill $PORTFORWARD_CONTAINER
          - docker rm $PORTFORWARD_CONTAINER
        services:
          - docker
        caches:
          - docker

    production:
    - step: 
        name: 'Fetch NPM dependencies'
        image: node:16.6
        script:
          - npm set //npm.pkg.github.com/:_authToken $GH_PACKAGES_PAT
          - npm ci
          - npm run build
          - npm prune --production
          - npm audit fix --production
          - export SEMVAR=$(git tag -l --contains HEAD)
          - echo $SEMVAR > semvar.txt
        caches:
          - nodemodules
        artifacts:
          - node_modules/**
          - semvar.txt
          - dist/**
    - step:
        name: "Build & Push Docker image"
        image: python:3.9-alpine
        script:
          - pip3 install -U awscli
          - export BRANCH_TAG=$(echo "$BITBUCKET_BRANCH" | sed -E 's/([^0-9a-zA-Z]+)/-/g' | awk '{print tolower($0)}')
          - export REPO=$DOCKER_REPO_URL/kidsloop-pdf-service
          - export COMMIT_TAG=$(echo $BITBUCKET_COMMIT | cut -c1-7)
          - export SEMVAR=$(cat semvar.txt)
          - aws ecr get-login-password --region eu-west-2 | docker login --username AWS --password-stdin $DOCKER_REPO_URL
          - docker build -t pdf-service -f Dockerfile --target build .
          - docker tag pdf-service:latest $REPO:$BRANCH_TAG-$COMMIT_TAG
          - docker push $REPO:$BRANCH_TAG-$COMMIT_TAG
          - |
            if [ "${#SEMVAR}" -ge 2 ]; then
              docker tag pdf-service:latest $REPO:$SEMVAR
              docker push $REPO:$SEMVAR 
            fi
        services:
          - docker
        size: 2x
    - step: *step-deploy-landing-zone
    dev:
    - step: 
        name: 'Fetch NPM dependencies'
        image: node:16.6
        script:
          - npm set //npm.pkg.github.com/:_authToken $GH_PACKAGES_PAT
          - npm ci
          - npm run build
          - npm prune --production
          - npm audit fix --production
          - export SEMVAR=$(git tag -l --contains HEAD)
          - echo $SEMVAR > semvar.txt
        caches:
          - nodemodules
        artifacts:
          - node_modules/**
          - semvar.txt
          - dist/**
    - step:
        name: "Build & Push Docker image"
        image: python:3.9-alpine
        script:
          - export SEMVAR=$(cat semvar.txt)
          - |
            if [[ "$SEMVAR" == *"dev"* ]]; then
              pip3 install -U awscli
              export REPO=$DOCKER_REPO_URL/kidsloop-pdf-service
              aws ecr get-login-password --region eu-west-2 | docker login --username AWS --password-stdin $DOCKER_REPO_URL
              docker build -f Dockerfile -t pdf-service --target build .
              docker tag pdf-service:latest $REPO:$SEMVAR
              docker push $REPO:$SEMVAR 
            fi
        services:
          - docker
        caches:
          - docker
        size: 2x
    - step: *step-deploy-landing-zone

definitions:
  caches:
    nodemodules: ./node_modules
  services:
    docker:
      memory: 4096
